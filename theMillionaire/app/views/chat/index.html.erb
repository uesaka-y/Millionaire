<!-- RailsからJS側へログインユーザの名前を渡す用div うまいやり方が思いつかなかった -->
<div>
  ようこそ<span id="login_user"><%= session[:user_name] %></span>さん
</div>
<!-- 現在ゲームルームに接続しているユーザ名を全て表示する -->
<div>
  listener:<span id="listener"></span>
</div>

<!-- コメントフォーム -->
<input id="comment" type="text">
<input id="send" type="button" value="send">
<input id="ready" type="button" value="準備完了"><br>
<input id="trushhand" type="button" value="出す">
<input id="pass" type="button" value="パス">
<!-- ゲームステージがここに描画される-->
<div id="enchant-stage" style="background-color:#006432;">
</div>

<!--　ゲームスクリプト -->
<script>
  /*ゲーム画面の定義*/
  enchant();//enchant.jsの有効化
  var core = new Core(640, 480);

  /******************ここからサーバ通信メソッド********************/
  /*ゲームの「新しくログインした奴がいた場合画面の名前欄を更新」って処理を
  実現しなければならないので、なかなかにコードが頭悪い*/

  //websocketサーバへの接続
  var ws = new WebSocket("ws://192.168.100.33:3001/");
  //自分のログインユーザ名の取得
  var ownname=document.getElementById("login_user").textContent;
  var ownturn=1;//自分のターン
  var fieldturn=1;//「誰の番か？」
  var num_login=1;

  //各ログインユーザのテキスト。0に自分の名前が入り、1からは他の人間が入る
  //クライアントごとで0以外のindexに入る名前の順番は一意とは限らないものとする
  var nametext=[];
  //名前を表示する座標。
  //「平民」などの身分を表示する座標はこれのyに30足すものとする
  var nameposition_x=[95,530,350,28];
  var nameposition_y=[395,280,20,160];
  var imagepaths=[];//手札配列　jokerなしは13、jokerありは14
  var handimage=[];//手札の画像オブジェクトの格納される配列
  var my_hands=13;
  var suit=["club","spade","dia","heart"]

  var tmp_cardpath="";

  var trush=new Array(4);
  var trushhands="";//自身が選択した捨て場に捨てるカード

  var fieldcard="back_0";//場のカード
  var fieldcardnum=0;//場のカードの枚数
  var revolution_flag=0;//場の革命状態フラグ(0:通常,1:革命)

  var isTouch=false;
  var touchX=null;
  var touchY=null;



  for(var suit_index=0;suit_index<4;suit_index++){
    for(var num_index=0;num_index<13;num_index++){
      console.log(document.getElementById("imagepath_"+suit[suit_index]+"_"+(num_index+1)).value);
      core.preload(document.getElementById("imagepath_"+suit[suit_index]+"_"+(num_index+1)).value);
    }
  }
  core.preload(document.getElementById("imagepath_joker_14_1").value);
  core.preload(document.getElementById("imagepath_joker_14_2").value);
  core.preload(document.getElementById("imagepath_back_0").value);
  core.preload(document.getElementById("clearfield").value);

  //通信確立時に行われる処理。ログインユーザのuser_nameを自動的にサーバに送信し
  //現在何人のユーザがアクティブなのかをサーバからユーザに返してもらう
  ws.onopen=function(){
    ws.send("messagetype*username*value*"+ownname);//自分の名前の送信
    ws.send("messagetype*Allusername*value*open");//全listenの取得
  };

  // メッセージ受信時の処理
  //この部分で「新しくログインしたユーザがいれば名前表示欄を更新する」処理を入れてる
  ws.onmessage = function(event){
    //受信したレスポンスメッセージを区切り文字で分割し、解読の足がかりにする
    var array_of_message=event.data.split("*");

    //usernameメッセージの場合、listener領域に自分の名前をpush
    if(array_of_message[1]=="username" && document.getElementById("listener").textContent.match(ownname)==null)
      document.getElementById("listener").append(ownname);

    //commentメソッドの場合コメント表示領域にコメントをpush
    else if(array_of_message[1]=="comment")
      document.getElementById("chat_area").append(array_of_message[3]);

    //Allusernameメソッドの場合listener領域に全listenユーザを表示
    else if(array_of_message[1]=="Allusername"){
      document.getElementById("listener").innerHTML=array_of_message[3];

      //ゲーム画面の「新しくログインしたユーザがいれば名前表示欄を更新する」処理用に
      //listener領域の文字列を,でsplitし、全ユーザの配列として生成
      var loginusers=document.getElementById("listener").textContent.split(",");

      //他のユーザが入ってくるたびに「他のユーザ名格納配列」のindexをリセットする
      num_login=1;
      var absolute=0;
      //全listenユーザに対して、名前の表示位置を決定するfor
      for(var index=0;index<loginusers.length;index++){

        //自分の名前を引っ張ってきた場合一番手前の位置に名前を書く
        if(document.getElementById("listener").textContent.split(",")[index]==ownname){
          nametext[0]=new Label(ownname);//自分の名前を格納
          nametext[0].x=nameposition_x[0];//x位置決定(下名前枠)
          nametext[0].y=nameposition_y[0];//y位置決定(下名前枠)
          core.rootScene.addChild(nametext[0]);//名前の描画
        }

        //他の人間の名前を引っ張ってきたら右上左のどこかの枠に名前を書く
        else{
          //他のユーザの名前を格納
          absolute=index-document.getElementById("listener").textContent.split(",").indexOf(ownname);
          if(absolute<0)//自分に対する他のプレイヤーのテーブル位置の決定
            absolute+=4;
          nametext[absolute]=new Label(document.getElementById("listener").textContent.split(",")[index]);
          nametext[absolute].x=nameposition_x[absolute];//x位置決定(indexの順に右、上、左に奴)
          nametext[absolute].y=nameposition_y[absolute];//y位置決定(indexの順に右、上、左の奴)
          core.rootScene.addChild(nametext[absolute]);//名前の描画
          num_login++;//「他のユーザ名格納配列」のindexを1つ進める
        }


      }//for(var index=0;index<loginusers.length;index++)終了

    }//Allusername終了

    else if(array_of_message[1]=="DeckCreate"){
      console.log("deckcreate");

      for(var i=0;i<13;i++){

        imagepaths[i]=array_of_message[3].split(",")[i];
        handimage[i] = new Sprite(32,64);//手札の代入
        console.log(array_of_message[3].split(",")[i]);
        handimage[i].image=core.assets[document.getElementById("imagepath_"+array_of_message[3].split(",")[i]).value];
        handimage[i].x=200+i*32;
        handimage[i].y=385;
        core.rootScene.addChild(handimage[i]);
      }
      //otherhands = new Sprite(32,64);//他者手札の代入
      //console.log(array_of_message[3].split(",").sort());
      //otherhands.image=core.assets[document.getElementById("imagepath_back").value];
      //otherhands.x=500;
      //otherhands.y=200;
      //core.rootScene.addChild(otherhands);


    }//DeckCreate　終了

    else if(array_of_message[1]=="GameStart"){
      ownturn=array_of_message[3];
      fieldturn=0;

      console.log("あなたは"+ownturn+"番目です");

    }

    else if(array_of_message[1]=="InformField"){
      fieldcard=array_of_message[3];
      fieldturn=array_of_message[5];
      console.log(fieldturn+"のターン");
      console.log("fieldcard:"+fieldcard.split("_"));
      fieldcardnum=array_of_message[3].split("_")[0].split(",").length-1;
      console.log("fieldcard="+fieldcard);
      console.log("fieldcardnum:"+fieldcardnum);
      if(revolution_flag!=Number(array_of_message[7])){
        revolution_flag=Number(array_of_message[7]);
        if(Number(array_of_message[7])==1){
          document.getElementById("chat_area").innerHTML+="<br>messagetype*comment*value*[革命勃発！]3>>K>>2";
        }
        else if(Number(array_of_message[7])==0){
          document.getElementById("chat_area").innerHTML+="<br>messagetype*comment*value*[革命鎮圧！]3<<K<<2";
        }
      }
      revolution_flag=Number(array_of_message[7]);
      console.log(array_of_message[3]+"が出されました:"+fieldcardnum+"枚");
      trushhands="";

      if(fieldcard=="back_0"){
        //core.rootScene.removeChild(resetfield);
        var resetfield=new Sprite(120,120);
        resetfield.image=core.assets[document.getElementById("clearfield").value];
        resetfield.x=280;
        resetfield.y=180;
        core.rootScene.addChild(resetfield);
        fieldcard="back_0";
        trushhands="";
        fieldcardnum=0;
      }

      //ゲーム画面をクリックした場合の処理。「カードの領域」をクリックした場合
      //「カードを選択したもの」と処理する
      if(ownturn==fieldturn){
        document.getElementById("chat_area").innerHTML="[message]あなたのターンです";
      }
      else{
        document.getElementById("chat_area").innerHTML="[message]"+document.getElementById("listener").textContent.split(",")[fieldturn]+"のターンです";
      }
      for(var i=0;i<array_of_message[3].split("_")[0].split(",").length-1;i++){
      core.rootScene.removeChild(trush[i]);
      trush[i]= new Sprite(32,64);
      trush[i].image=core.assets[document.getElementById("imagepath_"+array_of_message[3].split("_")[0].split(",")[i]+"_"+array_of_message[3].split("_")[1]).value];
      trush[i].x=300+i*10;
      trush[i].y=200;
      core.rootScene.addChild(trush[i]);
    }
      //core.rootScene.removeChild(handimage[selectedcard]);
      //ws.send("messagetype*SubmitCard*value*"+imagepaths[selectedcard]+"*player*"+ownname+"*hands*"+my_hands);//全listenの取得
    }
    isTouch=false;

  };//ws.onmessage終了
  document.getElementById("enchant-stage").addEventListener("click",function(e){
      if(ownturn==fieldturn){
        isTouch=true;
        touchX=(e.pageX-(window.innerWidth-640)/2-11);//クリックしたゲームウィンドウのx座標
        touchY=(e.pageY-(window.innerHeight-480)/2-6);//クリックしたゲームウィンドウのy座標
        console.log("[x]:"+e.pageX+"[y]"+e.pageY);
        console.log("gamewidth="+(touchX));
        console.log("gameheight="+(touchY));
        console.log("imagepaths:"+imagepaths);

        var selectedcard=parseInt((touchX-200)/32);//クリック座標から割り出した、クリック手札座標
        if(selectedcard>=0 && selectedcard<=12 && touchY>=385 && touchY<=449){
          //選択したカードが、捨て場のカードに対し大きい数なら選択可能
          console.log("fieldcardnum:"+fieldcardnum+"trushhands:"+trushhands.split(",").length-1);
          console.log("fieldcard:"+fieldcard);
          console.log("selectedcard="+imagepaths[selectedcard]);
          if(Number(fieldcard.split("_")[1])<Number(imagepaths[selectedcard].split("_")[1]) && imagepaths[selectedcard]!="back_0"){
            if((Number(imagepaths[selectedcard].split("_")[1])==Number(trushhands.split(",")[0].split("_")[1])) && fieldcardnum>=Number(trushhands.split(",").length-1) || fieldcardnum==0 || Number(trushhands.split(",").length)==1){
              if(handimage[selectedcard].y==385 && fieldcardnum!=Number(trushhands.split(",").length-1) || fieldcardnum==0){
                trushhands+=(imagepaths[selectedcard]+",");
                handimage[selectedcard].y=355;
                core.rootScene.addChild(handimage[selectedcard]);
              }
              else if(handimage[selectedcard].y==355){
                trushhands=trushhands.replace(imagepaths[selectedcard]+",","") ;
                handimage[selectedcard].y=385;
                core.rootScene.addChild(handimage[selectedcard]);
              }
              console.log("選択カード:"+trushhands);
            }
          }

            /*
          my_hands-=1;
          var trush= new Sprite(32,64);
          trush.image=core.assets[document.getElementById("imagepath_"+imagepaths[selectedcard]).value];
          trush.x=300;
          trush.y=200;
          core.rootScene.addChild(trush);
          core.rootScene.removeChild(handimage[selectedcard]);
          ws.send("messagetype*SubmitCard*value*"+imagepaths[selectedcard]+"*player*"+ownname+"*hands*"+my_hands);//全listenの取得
          */
        }
      }
    });


  // コメント送信ボタンを押した時の処理
  document.getElementById("send").onclick = function(){
    //コメント領域の入力値の取得
    var comment = document.getElementById("comment").value;
    //commentリクエストメッセージ
    var send_message="messagetype*comment*value*"+comment;
    //commentリクエストメッセージを送信。他のlistenerへコメントを同期してもらう
    ws.send(send_message);
  };

  //準備完了ボタンを押した時、シャッフルされた山札から
  //手札が順次配布される
  document.getElementById("ready").onclick = function(){
    //コメント領域の入力値の取得
    //var comment = document.getElementById("comment").value;
    //commentリクエストメッセージ
    //var send_message="messagetype*comment*value*"+comment;
    //commentリクエストメッセージを送信。他のlistenerへコメントを同期してもらう
    if(num_login-1==4)
    ws.send("messagetype*DeckShuffle*value*"+ownname);
  };

  //パスを選択した場合の処理
  document.getElementById("pass").onclick = function(){
    ws.send("messagetype*Pass*value*"+ownname);
  };

  //「出す」を選択した場合の処理
  document.getElementById("trushhand").onclick = function(){
    console.log(my_hands);
    if((trushhands.split(",").length-1==fieldcardnum || fieldcardnum==0) && ownturn==fieldturn){
      my_hands=my_hands-trushhands.split(",").length+1;
      console.log(my_hands);
      for(var i=0;i<trushhands.split(",").length-1;i++){
        core.rootScene.removeChild(handimage[imagepaths.indexOf(trushhands.split(",")[i])]);
        imagepaths[imagepaths.indexOf(trushhands.split(",")[i])]="back_0";
      }
      console.log("messagetype*SubmitCard*value*"+trushhands+"*player*"+ownname+"*hands*"+my_hands);
      if(my_hands==0){
        document.getElementById("listener").innerHTML+="<br>[あがり！]";
      }
      ws.send("messagetype*SubmitCard*value*"+trushhands+"*player*"+ownname+"*hands*"+my_hands);
  }
  };

  core.start();//ゲーム画面を実際にブラウザへ描画する
</script>
