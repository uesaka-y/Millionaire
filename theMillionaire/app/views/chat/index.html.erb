<!-- RailsからJS側へログインユーザの名前を渡す用div うまいやり方が思いつかなかった -->
<div>
  ようこそ<span id="login_user"><%= session[:user_name] %></span>さん
</div>
<!-- 現在ゲームルームに接続しているユーザ名を全て表示する -->
<div>
  listener:<span id="listener"></span>
</div>

<!-- コメントフォーム -->
<input id="comment" type="text">
<input id="send" type="button" value="send">
<!-- ゲームステージがここに描画される-->
<div id="enchant-stage" style="background-color:#006432;">
</div>

<!--　ゲームスクリプト -->
<script>
  /*ゲーム画面の定義*/
  enchant();//enchant.jsの有効化
  var core = new Core(640, 480);

  /******************ここからサーバ通信メソッド********************/
  /*ゲームの「新しくログインした奴がいた場合画面の名前欄を更新」って処理を
  実現しなければならないので、なかなかにコードが頭悪い*/

  //websocketサーバへの接続
  var ws = new WebSocket("ws://192.168.100.33:3001/");
  //自分のログインユーザ名の取得
  var ownname=document.getElementById("login_user").textContent;
  var ownturn=100;//自分のターン
  var fieldturn=200;//「誰の番か？」
  var num_login=1;

  //各ログインユーザのテキスト。0に自分の名前が入り、1からは他の人間が入る
  //クライアントごとで0以外のindexに入る名前の順番は一意とは限らないものとする
  var nametext=[];
  //名前を表示する座標。
  //「平民」などの身分を表示する座標はこれのyに30足すものとする
  var nameposition_x=[95,530,350,28];
  var nameposition_y=[395,280,20,160];
  var imagepaths=[];//手札配列　jokerなしは13、jokerありは14
  var handimage=[];//手札の画像オブジェクトの格納される配列
  var suit=["club","spade","dia","heart"]

  var tmp_cardpath="";

  var isTouch=false;
  var touchX=null;
  var touchY=null;



  for(var suit_index=0;suit_index<4;suit_index++){
    for(var num_index=0;num_index<13;num_index++){
      console.log(document.getElementById("imagepath_"+suit[suit_index]+"_"+(num_index+1)).value);
      core.preload(document.getElementById("imagepath_"+suit[suit_index]+"_"+(num_index+1)).value);
    }
  }
  core.preload(document.getElementById("imagepath_joker_1").value);
  core.preload(document.getElementById("imagepath_joker_2").value);
  core.preload(document.getElementById("imagepath_back").value);


  //通信確立時に行われる処理。ログインユーザのuser_nameを自動的にサーバに送信し
  //現在何人のユーザがアクティブなのかをサーバからユーザに返してもらう
  ws.onopen=function(){
    ws.send("messagetype*username*value*"+ownname);//自分の名前の送信
    ws.send("messagetype*Allusername*value*open");//全listenの取得
  };

  // メッセージ受信時の処理
  //この部分で「新しくログインしたユーザがいれば名前表示欄を更新する」処理を入れてる
  ws.onmessage = function(event){
    //受信したレスポンスメッセージを区切り文字で分割し、解読の足がかりにする
    var array_of_message=event.data.split("*");

    //usernameメッセージの場合、listener領域に自分の名前をpush
    if(array_of_message[1]=="username" && document.getElementById("listener").textContent.match(ownname)==null)
      document.getElementById("listener").append(ownname);

    //commentメソッドの場合コメント表示領域にコメントをpush
    else if(array_of_message[1]=="comment")
      document.getElementById("chat_area").append(array_of_message[3]);

    //Allusernameメソッドの場合listener領域に全listenユーザを表示
    else if(array_of_message[1]=="Allusername"){
      document.getElementById("listener").innerHTML=array_of_message[3];

      //ゲーム画面の「新しくログインしたユーザがいれば名前表示欄を更新する」処理用に
      //listener領域の文字列を,でsplitし、全ユーザの配列として生成
      var loginusers=document.getElementById("listener").textContent.split(",");

      //他のユーザが入ってくるたびに「他のユーザ名格納配列」のindexをリセットする
      num_login=1;
      var absolute=0;
      //全listenユーザに対して、名前の表示位置を決定するfor
      for(var index=0;index<loginusers.length;index++){

        //自分の名前を引っ張ってきた場合一番手前の位置に名前を書く
        if(document.getElementById("listener").textContent.split(",")[index]==ownname){
          nametext[0]=new Label(ownname);//自分の名前を格納
          nametext[0].x=nameposition_x[0];//x位置決定(下名前枠)
          nametext[0].y=nameposition_y[0];//y位置決定(下名前枠)
          core.rootScene.addChild(nametext[0]);//名前の描画
        }

        //他の人間の名前を引っ張ってきたら右上左のどこかの枠に名前を書く
        else{
          //他のユーザの名前を格納
          absolute=index-document.getElementById("listener").textContent.split(",").indexOf(ownname);
          if(absolute<0)//自分に対する他のプレイヤーのテーブル位置の決定
            absolute+=4;
          nametext[absolute]=new Label(document.getElementById("listener").textContent.split(",")[index]);
          nametext[absolute].x=nameposition_x[absolute];//x位置決定(indexの順に右、上、左に奴)
          nametext[absolute].y=nameposition_y[absolute];//y位置決定(indexの順に右、上、左の奴)
          core.rootScene.addChild(nametext[absolute]);//名前の描画
          num_login++;//「他のユーザ名格納配列」のindexを1つ進める
        }


      }//for(var index=0;index<loginusers.length;index++)終了

      rendererGameView(num_login);
    }//Allusername終了

    else if(array_of_message[1]=="DeckCreate"){

      console.log("deckcreate");
      for(var i=0;i<13;i++){
        imagepaths[i]=array_of_message[3].split(",")[i];
        handimage[i] = new Sprite(32,64);//手札の代入
        console.log(array_of_message[3].split(",")[i]);
        handimage[i].image=core.assets[document.getElementById("imagepath_"+array_of_message[3].split(",")[i]).value];
        handimage[i].x=200+i*32;
        handimage[i].y=385;
        //他プレイヤーのトランプの表示-->
        handimage[i].image=core.assets[document.getElementById("imagepath_back_side")];
        handimage[i].x=200+i*32;
        handimage[i].y=385;

        handimage[i].image=core.assets[document.getElementById("imagepath_back")];
        handimage[i].x=200+i*32;
        handimage[i].y=385;

        handimage[i].image=core.assets[document.getElementById("imagepath_back_side")];
        handimage[i].x=200+i*32;
        handimage[i].y=385;

        core.rootScene.addChild(handimage[i]);
      }
      //otherhands = new Sprite(32,64);//他者手札の代入
      //console.log(array_of_message[3].split(",").sort());
      //otherhands.image=core.assets[document.getElementById("imagepath_back").value];
      //otherhands.x=500;
      //otherhands.y=200;
      //core.rootScene.addChild(otherhands);


    }//DeckCreate　終了

    else if(array_of_message[1]=="GameStart"){
      ownturn=array_of_message[3];
      fieldturn=0;
      console.log("あなたは"+ownturn+"番目です");

    }

    //ゲーム画面をクリックした場合の処理。「カードの領域」をクリックした場合
    //「カードを選択したもの」と処理する
    if(ownturn==fieldturn){
      document.getElementById("chat_area").append("[message]あなたのターンです<br>");
      document.getElementById("enchant-stage").addEventListener("click",function(e){

          isTouch=true;
          touchX=e.pageX;
          touchY=e.pageY;
          console.log("[x]"+touchX+"[y]"+touchY);

          var selectedcard=parseInt((touchX-210)/32);
          if(selectedcard>=0 && selectedcard<=12 && touchY>=470 && touchY<=534)
            console.log(imagepaths[selectedcard]);

      });
    }

  };//ws.onmessage終了



  // コメント送信ボタンを押した時の処理
  document.getElementById("send").onclick = function(){
    //コメント領域の入力値の取得
    var comment = document.getElementById("comment").value;
    //commentリクエストメッセージ
    var send_message="messagetype*comment*value*"+comment;
    //commentリクエストメッセージを送信。他のlistenerへコメントを同期してもらう
    ws.send(send_message);
  };



/**************　ゲーム画面のレンダリング関数 ***************/
//引数として「現在のログイン人数」を持つ
  function rendererGameView(num_login) {

    //プレイヤーが4人揃った時
    if(num_login-1==4){
      num_login=0;
      document.getElementById("chat_area").append("[message]4人揃いました。ゲームを開始します。\n");
      console.log("deckshuffle:"+ownname);
      ws.send("messagetype*DeckShuffle*value*"+ownname);
    }

  };

  core.start();//ゲーム画面を実際にブラウザへ描画する
</script>
